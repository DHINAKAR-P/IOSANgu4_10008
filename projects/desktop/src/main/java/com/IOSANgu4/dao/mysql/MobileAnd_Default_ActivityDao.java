package com.IOSANgu4.dao.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;
import org.apache.log4j.*;



 import com.IOSANgu4.domain.core.MobileAnd;import com.IOSANgu4.domain.core.IOUser;

/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Transactional
@Repository("MobileAnd_Default_ActivityDao")
public class MobileAnd_Default_ActivityDao   {

	//private Log log = LogFactory.getLog(getClass());
	private static Logger log = Logger.getLogger(MobileAnd_Default_ActivityDao.class.getName());

	@Value("${create_MobileAnd.sql}")
	private String create_MobileAnd;
	@Value("${search_for_update_MobileAnd.sql}")
	private String search_for_update_MobileAnd;
	@Value("${update_MobileAnd.sql}")
	private String update_MobileAnd;
	@Value("${delete_MobileAnd.sql}")
	private String delete_MobileAnd;
	@Value("${get_all_MobileAnd.sql}")
	private String get_all_MobileAnd;


    @PersistenceContext
	private EntityManager entityManager;



	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform fetch operation of  MobileAnd noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_MobileAnd object will return
	*@throws Exception
	*/

	public MobileAnd mobileand_search_for_update(long id, IOUser user) throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("mobileand_search_for_update Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(search_for_update_MobileAnd,MobileAnd.class)

			.setParameter("id", id);;

			ArrayList<MobileAnd> MobileAnd_list =	(ArrayList<MobileAnd>)result.getResultList();

			if(MobileAnd_list  == null){

			log.error("mobileand_search_for_update Dao throws exception :" + "no MobileAnd found" );
			}
			log.info("Object returned from mobileand_search_for_update  Dao method !");
			return (MobileAnd) MobileAnd_list.get(0);

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("mobileand_search_for_update Dao throws exception : "+e.toString());

		}
		return null;


	}

	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to get list of  MobileAnd noun from  database
	*
	*
	*@return List of MobileAnd object will return
	*@throws Exception
	*/

	public ArrayList<MobileAnd> get_all_mobileand() throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("get_all_mobileand Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(get_all_MobileAnd,MobileAnd.class)

;

			ArrayList<MobileAnd> MobileAnd_list =	(ArrayList<MobileAnd>)result.getResultList();

			if(MobileAnd_list .size() < 1){

			log.error("get_all_mobileand Dao throws exception :" + "no MobileAnd found" );
				return new ArrayList<MobileAnd>();
			}
			log.info("Object returned from get_all_mobileand  Dao method !");
			return (ArrayList<MobileAnd>) MobileAnd_list;

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("get_all_mobileand Dao throws exception : "+e.toString());

		}
		return null;


	}



	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform save operation of  MobileAnd noun into database
	*@param MobileAnd
	*@param user
	*@return MobileAnd object will return
	*@throws Exception
	*/

	@Transactional
	public MobileAnd create_mobileand(MobileAnd MobileAnd, IOUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("create_mobileand Dao started operation!");//dhina updateverb

		try{
			Query query = entityManager
					.createNativeQuery(create_MobileAnd)
			.setParameter("name", MobileAnd.getName())
			.setParameter("created_by", user == null ? 0:user.getId())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			int insertedId = query.executeUpdate();
					String lastIndex="select last_insert_id()";
					Query sql = entityManager.createNativeQuery(lastIndex);
					BigInteger new_id = (BigInteger) sql.getSingleResult();
					MobileAnd.setId(new_id.longValue());
					System.out.println("create data---"+insertedId);

			log.info("Object returned from create_mobileand  Dao method !");

			return MobileAnd;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (create_mobileand) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform update operation of  MobileAnd noun into database
	*@param MobileAnd
	*@param user
	*@return the_MobileAnd object will return
	*@throws Exception
	*/

	@Transactional
	public MobileAnd update_mobileand(MobileAnd MobileAnd, IOUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("update_mobileand Dao started operation!");//dhina updateverb

		try{
			Query query = entityManager
					.createNativeQuery(update_MobileAnd)
			.setParameter("id", MobileAnd.getId())
			.setParameter("name", MobileAnd.getName())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			query.executeUpdate();

			log.info("Object returned from update_mobileand  Dao method !");

			return MobileAnd;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (update_mobileand) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform delete operation of  MobileAnd noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_MobileAnd id deleted based on id
	*@throws Exception
	*/

	@Transactional
	public String  delete_mobileand(long id, IOUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("delete_mobileand Dao started operation!");//dhina updateverb

		try{
			Query query = entityManager
					.createNativeQuery(delete_MobileAnd)
			.setParameter("id", id);

			query.executeUpdate();

			log.info("Object returned from delete_mobileand  Dao method !");

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (delete_mobileand) throws Exception : "+e.toString());

		}
		return null;



	}




}