package com.IOSANgu4.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.IOSANgu4.domain.core.MobileAnd;

import com.IOSANgu4.config.IOSANgu4SwaggerUIConstants;

import com.IOSANgu4.service.MobileAnd_Default_ActivityService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/MobileAnd_Default_Activity", description = "MobileAnd_Default_Activity of MobileAnd_Default_Activity",produces = "application/json")
@CrossOrigin
@Controller("MobileAnd_Default_ActivityController")
@RequestMapping("/MobileAnd_Default_Activity")
public class MobileAnd_Default_ActivityController  extends IOBaseController implements IOSANgu4SwaggerUIConstants {

private static Logger log = Logger.getLogger(MobileAnd_Default_ActivityController.class.getName());

	private MobileAnd_Default_ActivityService MobileAnd_Default_Activity_service;


	public MobileAnd_Default_ActivityService get_MobileAnd_Default_Activity_service() {
		return MobileAnd_Default_Activity_service;
	}


	@Resource(name="MobileAnd_Default_ActivityService")
	public void set_MobileAnd_Default_Activity_service(MobileAnd_Default_ActivityService MobileAnd_Default_Activity_service) {
		this.MobileAnd_Default_Activity_service = MobileAnd_Default_Activity_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  MobileAnd noun into database
	* @param the_MobileAnd
	*@return MobileAnd object will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_MobileAnd", httpMethod = "POST",notes = "creates a noun of MobileAnd",response = MobileAnd.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IOSANgu4SwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IOSANgu4SwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IOSANgu4SwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IOSANgu4SwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IOSANgu4SwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_MobileAnd" ,headers="Accept=application/json")
    @ResponseBody
	public MobileAnd create_MobileAnd(@RequestBody MobileAnd the_MobileAnd) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_MobileAnd controller started operation!");

		MobileAnd a_MobileAnd;

		a_MobileAnd = MobileAnd_Default_Activity_service.create_mobileand(the_MobileAnd, super.getUser());

		log.info("Object returned from create_MobileAnd method !");

		return a_MobileAnd;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  MobileAnd noun into database
	*@param the_MobileAnd
	*@return MobileAndobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_MobileAnd", httpMethod = "PUT",notes = "updates a noun of MobileAnd",response = MobileAnd.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IOSANgu4SwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IOSANgu4SwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IOSANgu4SwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IOSANgu4SwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IOSANgu4SwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_MobileAnd" ,headers="Accept=application/json")
    @ResponseBody
	public MobileAnd update_MobileAnd(@RequestBody MobileAnd the_MobileAnd) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_MobileAnd controller started operation!");

		MobileAnd a_MobileAnd;

		a_MobileAnd = MobileAnd_Default_Activity_service.update_mobileand(the_MobileAnd, super.getUser());

		log.info("Object returned from update_MobileAnd method !");

		return a_MobileAnd;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  MobileAnd noun from  database based on given noun id
	*@param MobileAnd_id
	*@return MobileAndobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_MobileAnd/{MobileAnd_id}", httpMethod = "GET",notes = "updates a noun of MobileAnd",response = MobileAnd.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IOSANgu4SwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IOSANgu4SwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IOSANgu4SwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IOSANgu4SwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IOSANgu4SwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_MobileAnd/{MobileAnd_id}" ,headers="Accept=application/json")
    @ResponseBody
	public MobileAnd search_for_update_MobileAnd(@PathVariable("MobileAnd_id")long MobileAnd_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_MobileAnd controller started operation!");

		MobileAnd the_MobileAnd = new MobileAnd();

		the_MobileAnd = MobileAnd_Default_Activity_service.mobileand_search_for_update(MobileAnd_id, super.getUser());

		log.info("Object returned from search_for_update_MobileAnd method !");

		return the_MobileAnd;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  MobileAnd noun from  database based on given noun id
	*@param MobileAnd_id
	*@return MobileAndobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_MobileAnd/{MobileAnd_id}", httpMethod = "DELETE",notes = "deletes a noun of MobileAnd",response = MobileAnd.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IOSANgu4SwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IOSANgu4SwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IOSANgu4SwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IOSANgu4SwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IOSANgu4SwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_MobileAnd/{MobileAnd_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_MobileAnd(@PathVariable("MobileAnd_id")long MobileAnd_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_MobileAnd controller started operation!");

		String service_return_msg = "";

		service_return_msg = MobileAnd_Default_Activity_service.delete_mobileand(MobileAnd_id, super.getUser());

		log.info("Object returned from delete_MobileAnd method !");

		return service_return_msg;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  MobileAnd noun from  database
	*
	*@return List of MobileAnd objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_MobileAnd", httpMethod = "GET",notes = "special search that gets all values of MobileAnd",response = MobileAnd.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IOSANgu4SwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IOSANgu4SwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IOSANgu4SwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IOSANgu4SwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IOSANgu4SwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_MobileAnd" ,headers="Accept=application/json")
    @ResponseBody
	public List<MobileAnd> get_all_MobileAnd() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_MobileAnd controller started operation!");

		List<MobileAnd> MobileAnd_list = new ArrayList<MobileAnd>();

		MobileAnd_list = MobileAnd_Default_Activity_service.get_all_mobileand();

		log.info("Object returned from get_all_MobileAnd method !");

		return MobileAnd_list;


	}




}