package com.IOSANgu4.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.IOSANgu4.domain.core.MobileAnd;

import com.IOSANgu4.dao.mysql.MobileAnd_Default_ActivityDao;

import com.IOSANgu4.domain.core.IOUser;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("MobileAnd_Default_ActivityService")
public class MobileAnd_Default_ActivityService extends IOBaseService  {
private static Logger log = Logger.getLogger(MobileAnd_Default_ActivityService.class.getName());

	private MobileAnd_Default_ActivityDao MobileAnd_Default_Activity_dao;


	public MobileAnd_Default_ActivityDao get_MobileAnd_Default_Activity_dao() {
		return MobileAnd_Default_Activity_dao;
	}


	@Resource(name="MobileAnd_Default_ActivityDao")
	public void set_MobileAnd_Default_Activity_dao(MobileAnd_Default_ActivityDao MobileAnd_Default_Activity_dao) {
		this.MobileAnd_Default_Activity_dao = MobileAnd_Default_Activity_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  MobileAnd noun into database
	*@param MobileAnd
	*@param user
	*@return the_MobileAnd object will return
	*@throws Exception
	*/

	public MobileAnd create_mobileand(MobileAnd MobileAnd, IOUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_mobileand service operation started !");

		try{
			MobileAnd the_MobileAnd;

			the_MobileAnd = MobileAnd_Default_Activity_dao.create_mobileand(MobileAnd, user);

 			log.info(" Object returned from create_mobileand  service method !");
			return the_MobileAnd;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_mobileand service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  MobileAnd noun into database
	*@param MobileAnd
	*@param user
	*@return the_MobileAnd object will return
	*@throws Exception
	*/

	public MobileAnd update_mobileand(MobileAnd MobileAnd, IOUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_mobileand service operation started !");

		try{
			MobileAnd the_MobileAnd;

			the_MobileAnd = MobileAnd_Default_Activity_dao.update_mobileand(MobileAnd, user);

 			log.info(" Object returned from update_mobileand  service method !");
			return the_MobileAnd;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_mobileand service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  MobileAnd noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_MobileAnd object will return
	*@throws Exception
	*/

	public MobileAnd mobileand_search_for_update(long id, IOUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("mobileand_search_for_update service operation started !");

		try{
			MobileAnd the_MobileAnd;

			the_MobileAnd = MobileAnd_Default_Activity_dao.mobileand_search_for_update(id, user);

 			log.info(" Object returned from mobileand_search_for_update  service method !");
			return the_MobileAnd;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("mobileand_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  MobileAnd noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_MobileAnd id deleted based on id
	*@throws Exception
	*/

	public String  delete_mobileand(long id, IOUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_mobileand service operation started !");

		try{
			String method_return_message;

			method_return_message = MobileAnd_Default_Activity_dao.delete_mobileand(id, user);

 			log.info(" Object returned from delete_mobileand  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_mobileand service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  MobileAnd noun from  database
	*
	*
	*@return List of MobileAnd object will return
	*@throws Exception
	*/

	public ArrayList<MobileAnd> get_all_mobileand() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<MobileAnd> MobileAnd_list;

			MobileAnd_list = MobileAnd_Default_Activity_dao.get_all_mobileand();

 			log.info(" Object returned from   service method !");
			return MobileAnd_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}